-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Enum.Choice
import Api.Interface
import Api.Object
import Api.Scalar
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import IdScalarCodecs
import Json.Decode as Decode


buildEventChoiceInput :
    EventChoiceInputRequiredFields
    -> EventChoiceInput
buildEventChoiceInput required____ =
    { eventID = required____.eventID, choice = required____.choice }


type alias EventChoiceInputRequiredFields =
    { eventID : IdScalarCodecs.Id
    , choice : Api.Enum.Choice.Choice
    }


{-| Type for the EventChoiceInput input object.
-}
type alias EventChoiceInput =
    { eventID : IdScalarCodecs.Id
    , choice : Api.Enum.Choice.Choice
    }


{-| Encode a EventChoiceInput into a value that can be used as an argument.
-}
encodeEventChoiceInput : EventChoiceInput -> Value
encodeEventChoiceInput input____ =
    Encode.maybeObject
        [ ( "eventID", (IdScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input____.eventID |> Just ), ( "choice", Encode.enum Api.Enum.Choice.toString input____.choice |> Just ) ]

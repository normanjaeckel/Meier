-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.Choice exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Choice
    = Red
    | Yellow
    | Green


list : List Choice
list =
    [ Red, Yellow, Green ]


decoder : Decoder Choice
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "RED" ->
                        Decode.succeed Red

                    "YELLOW" ->
                        Decode.succeed Yellow

                    "GREEN" ->
                        Decode.succeed Green

                    _ ->
                        Decode.fail ("Invalid Choice type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Choice -> String
toString enum____ =
    case enum____ of
        Red ->
            "RED"

        Yellow ->
            "YELLOW"

        Green ->
            "GREEN"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Choice
fromString enumString____ =
    case enumString____ of
        "RED" ->
            Just Red

        "YELLOW" ->
            Just Yellow

        "GREEN" ->
            Just Green

        _ ->
            Nothing

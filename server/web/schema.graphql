schema {
  query: Query
  mutation: Mutation
}

type Query {
    campaign(id: ID!): Campaign!
    campaignList: [Campaign!]!
}

type Mutation {
    addCampaign(title: String!, days: [String!]): Campaign!
    updateCampaign(id: ID!, title: String!): Campaign!
    deleteCampaign(id: ID!): Boolean!

    addDay(campaignID: ID!, title: String!): Day!
    updateDay(id: ID!, title: String!): Day!
    deleteDay(id: ID!): Boolean!

    addEvent(campaignID: ID!, title: String!, capacity: Int!, maxSpecialPupils: Int!, dayIDs: [ID!]): Event!
    updateEvent(id: ID!, title: String, capacity: Int, maxSpecialPupils: Int, dayIDs: [ID!]): Event!
    deleteEvent(id: ID!): Boolean!

    addPupil(campaignID: ID!, name: String!, class: String!, special: Boolean = false): Pupil!
    updatePupil(id: ID!, name: String, class: String, special: Boolean): Pupil!
    deletePupil(id: ID!): Boolean!
    addPupilsOfClass(campaignID: ID!, class: String!, names: [String!]!): [Pupil!]!

    assignPupil(pupilID: ID!, eventID: ID!, dayID: ID!): Day!
    # assignAll(campaignID: ID!): Campaign!

    pupilChoice(pupilID: ID!, choices: [EventChoiceInput!]!): Boolean!
}

type Campaign {
    id: ID!
    title: String!
    loginToken: String!
    days: [Day!]!
    events: [Event!]!
    pupils: [Pupil!]!
}

type Day {
    id: ID!
    campaign: Campaign!
    title: String!
    events: [EventPupil!]!
}

type EventPupil {
    event: Event!
    pupils: [Pupil!]!
}

type Event {
    id: ID!
    campaign: Campaign!
    title: String!
    capacity: Int!
    maxSpecialPupils: Int!
}

type Pupil {
    id: ID!
    campaign: Campaign!
    loginToken: String!
    name: String!
    class: String!
    isSpecial: Boolean!
    choices: [EventChoice!]!
}

input EventChoiceInput {
    eventID: ID!
    choice: Choice!
}

type EventChoice {
    event: Event!
    choice: Choice!
}

enum Choice {
    RED
    YELLOW
    GREEN
}
